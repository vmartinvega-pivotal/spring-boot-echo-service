#! /bin/sh
### BEGIN INIT INFO
# Provides:          springechoservice
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Spring Echo service
# Description:       Spring Echo service run at system startup
### END INIT INFO
# Author: fabian lee
#
# Do NOT "set -e"

# CHANGE THIS FOR YOUR ENVIRONMENT!!!
WORKING_DIR=/home/vagrant/spring-echo-example
SVCPORT=8080

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Spring Echo service"
NAME=springechoservice
LOG_DIR=/var/log/$NAME
USER=springecho
GROUP=$USER

JAVA=/usr/bin/java
#JAVA=/usr/lib/jvm/java-8-openjdk-amd64-setcap/jre/bin/java
JVM_ARGS="-Xms512m -Xmx768m"
JAR_PATH=$WORKING_DIR/build/libs/spring-echo-example-1.0.0.jar
JAVA_ARGS="$JVM_ARGS -jar $JAR_PATH --server.port=$SVCPORT"

PID_DIR="/var/run/$NAME"
PID_FILE="$PID_DIR/$NAME.pid"
SCRIPTNAME=/etc/init.d/$NAME

# Exit if is working dir does not exist
if [ ! -d "$WORKING_DIR" ]; then
  echo "$WORKING_DIR folder does not exist, check WORKING_DIR variable in script"
  log_failure_msg "Working directory not found at $WORKING_DIR"
  exit 3
fi
# Test that Java is installed
if [ ! -x "$JAVA" ]; then
  log_failure_msg "Java executable not found at $JAVA"
  exit 2
fi

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{

	log_daemon_msg "Starting $DESC"

        pid=`pidofproc -p $PID_FILE $NAME`
        if [ -n "$pid" ] ; then
                log_daemon_msg "Already running."
                log_end_msg 0
                exit 0
        fi

        # Prepare environment
        mkdir -p "$LOG_DIR" "$PID_DIR" && chown "$USER":"$GROUP" "$LOG_DIR" "$PID_DIR"
	touch -f "$LOG_DIR/$NAME.log" && chown "$USER":"$GROUP" "$LOG_DIR/$NAME.log"

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	log_daemon_msg "Running $JAVA $JAVA_ARGS"
	start-stop-daemon -d $WORKING_DIR --background --no-close --start --user $USER -c $USER -m --pidfile $PID_FILE --exec $JAVA -- $JAVA_ARGS >> $LOG_DIR/$NAME.log 2>&1


	return=$?
	log_daemon_msg "return was $return (0=started,1=already running,2=error)"
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
	log_end_msg $return
	exit $return
}

#
# Function that stops the daemon/service
#
do_stop()
{
	log_daemon_msg "Stopping $DESC"

        if [ -f "$PID_FILE" ]; then
                start-stop-daemon --stop --pidfile "$PID_FILE" \
                        --user "$USER" \
                        --quiet \
                        --retry forever/TERM/20 > /dev/null
                if [ $? -eq 1 ]; then
                        log_daemon_msg "$DESC is not running but pid file exists, cleaning up"
                elif [ $? -eq 3 ]; then
                        PID="`cat $PID_FILE`"
                        log_daemon_msg "Failed to stop $DESC (pid $PID)"
                        exit 1
                fi
                rm -f "$PID_FILE"
        else
                log_daemon_msg "(not running)"
        fi

        log_end_msg 0
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$JAVA" "$NAME" && exit 0 || exit $?
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
